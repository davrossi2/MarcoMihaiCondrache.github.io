<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>64bit on Ciao, Sono Marco!</title>
        <link>https://marcomihaicondrache.github.io/it/tags/64bit/</link>
        <description>Recent content in 64bit on Ciao, Sono Marco!</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
        
        <atom:link href="https://marcomihaicondrache.github.io/it/tags/64bit/index.xml" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>Com&#39;√® fatta la cpu?</title>
            <link>https://marcomihaicondrache.github.io/it/post/how_the_cpu_is_made/</link>
            <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://marcomihaicondrache.github.io/it/post/how_the_cpu_is_made/</guid>
            <description>

&lt;h2 id=&#34;qual-√®-il-suo-scopo&#34;&gt;Qual √® il suo scopo ?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;√à un dispositivo hardware il cui fine √® quello di eseguire ed elaborare istruzioni a partire da un‚Äôarchitettura sotto il controllo del sistema operativo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;√à detta unit√† &amp;ldquo;centrale&amp;rdquo; perch√© coordina in maniera centralizzata tutte le altre unit√† di elaborazione presenti nelle architetture hardware dei computer per la gestione delle varie periferiche interne o schede elettroniche (scheda audio, scheda video, scheda di rete), es. coprocessore e processore di segnale digitale.&lt;/p&gt;

&lt;p&gt;In base all&amp;rsquo;organizzazione della memoria si possono distinguere le seguenti due famiglie di CPU:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;con architettura di von Neumann, in cui i dati e le istruzioni risiedono nella stessa memoria (√® dunque possibile avere codice automodificante). Questa architettura √® la pi√π comune, perch√© √® molto semplice e flessibile.&lt;/li&gt;
&lt;li&gt;con architettura Harvard, in cui i dati e le istruzioni risiedono in due memorie separate. Questa architettura pu√≤ garantire prestazioni migliori poich√© le due memorie possono lavorare in parallelo riducendo le ale strutturali, ma √® ovviamente molto pi√π complessa da gestire. √à tipicamente utilizzata nei DSP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;la-struttura&#34;&gt;La struttura&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://marcomihaicondrache.github.io/img/architteture.gif&#34; alt=&#34;Cpu-structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Una generica CPU contiene:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;un&amp;rsquo;unit√† di controllo (anche nota con la sigla CU) che legge dalla memoria le istruzioni, se occorre legge anche i dati per l&amp;rsquo;istruzione letta, esegue l&amp;rsquo;istruzione e memorizza il risultato se c&amp;rsquo;√®, scrivendolo in memoria o in un registro della CPU.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;un&amp;rsquo;unit√† aritmetica e logica (anche nota con l&amp;rsquo;acronimo ALU) che si occupa di eseguire le operazioni logiche e aritmetiche;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I registri ovvero delle piccole memorie che servono alla cpu per eseguire le istruzioni:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;il registro &lt;strong&gt;PC&lt;/strong&gt; (&lt;em&gt;Program Counter&lt;/em&gt;), che contiene l&amp;rsquo;indirizzo in memoria della prossima istruzione da eseguire;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;il registro &lt;strong&gt;MAR&lt;/strong&gt; (&lt;em&gt;Memory Address Register&lt;/em&gt;) registra l&amp;rsquo;indirizzo della l&amp;rsquo;indirizzo della posizione di memoria che viene acceduta;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;il registro &lt;strong&gt;MDR&lt;/strong&gt; (&lt;em&gt;Memory Data Register&lt;/em&gt;) Tutti i dati e le istruzioni che dalla memoria devono essere elaborati nel processore, transitano attraverso il registro MDR e solo successivamente da questo raggiungono gli opportuni registri per l&amp;rsquo;elaborazione vera e propria;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;il registro &lt;strong&gt;IR&lt;/strong&gt; (&lt;em&gt;Instruction Register&lt;/em&gt;) Questo registro ha il compito di accogliere dalla memoria (attraverso il MDR), durante una fase di fetch, l&amp;rsquo;istruzione da eseguire, quella cio√® puntata dal PC;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;registri &lt;strong&gt;generali&lt;/strong&gt; (&lt;em&gt;R1, R2..&lt;/em&gt;) Sono utilizzati per contenere i dati in transito per un&amp;rsquo;elaborazione: gli addendi di un&amp;rsquo;addizione che l&amp;rsquo;ALU sta per effettuare, il risultato di un calcolo che l&amp;rsquo;ALU ha effettuato, un indirizzo di memoria in cui si trova un dato che dovr√† essere acceduto in seguito, ecc. Un numero elevato di tali registri conferisce maggiore flessibilit√† nella programmazione, ma complica la struttura del processore dal punto di vista architetturale.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solitamente le dimensioni dei registri e dei bus e&amp;rsquo; uguale alla dimensione delle istruzioni che la cpu deve eseguire.
Per esempio se la cpu esegue istruzioni a 64bit i registri saranno di 8 byte (&lt;strong&gt;8 * 8 = 64&lt;/strong&gt;)&lt;/p&gt;

&lt;h2 id=&#34;l-esecuzione-di-un-istruzione&#34;&gt;L&amp;rsquo;esecuzione di un&amp;rsquo;istruzione&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Caricamento dell&amp;rsquo;istruzione (Instruction Fetch) dalla memoria in base all&amp;rsquo;indirizzo fornito dai registri.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Decodifica (Operand Assembly): una volta che la &lt;a href=&#34;https://it.wikipedia.org/wiki/Word&#34;&gt;word&lt;/a&gt; √® stata prelevata, viene determinata quale operazione debba essere eseguita e come ottenere gli operandi, in base ad una funzione il cui dominio √® costituito dai codici operativi (tipicamente i bit alti delle &lt;a href=&#34;https://it.wikipedia.org/wiki/Word&#34;&gt;word&lt;/a&gt;) ed il codominio consiste nei brani di microprogramma da eseguire.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Esecuzione (Execute) Viene eseguita l&amp;rsquo;istruzione: Nell&amp;rsquo;ultimo passo dell&amp;rsquo;esecuzione viene incrementato il PC: tipicamente di uno se l&amp;rsquo;istruzione non era un salto condizionale, altrimenti l&amp;rsquo;incremento dipende dall&amp;rsquo;istruzione e dall&amp;rsquo;esito di questa&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;la-sincronizzazione&#34;&gt;La sincronizzazione&lt;/h2&gt;

&lt;p&gt;La cpu per eseguire le istruzioni ha bisogno di essere sincronizzata con gli altri componenti del pc come per esempio con la memoria.
Di questo compito si occupa il clock.&lt;/p&gt;

&lt;p&gt;Il termine clock, In elettronica, indica un segnale periodico, generalmente un&amp;rsquo;onda quadra, utilizzato per sincronizzare il funzionamento dei dispositivi elettronici digitali.&lt;/p&gt;

&lt;p&gt;La velocit√† o frequenza di clock √® il numero di commutazioni tra i due livelli logici &amp;ldquo;0&amp;rdquo; e &amp;ldquo;1&amp;rdquo; che i circuiti all&amp;rsquo;interno di un&amp;rsquo;unit√† di calcolo o di un microprocessore sono in grado di eseguire nell&amp;rsquo;unit√† di tempo di un secondo, ed √® espressa in cicli al secondo, o hertz, e suoi multipli; normalmente per eseguire un&amp;rsquo;istruzione o una semplice somma sono necessari pi√π cicli di clock.&lt;/p&gt;

&lt;h2 id=&#34;informazioni&#34;&gt;Informazioni&lt;/h2&gt;

&lt;p&gt;Questo Post √® stato scritto da Marco Mihai Condrache.
Qui sotto le fonti.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wikipedia.com&#34; title=&#34;Sito web di wikipedia&#34;&gt;Wikipedia&lt;/a&gt; (Alcune parti del testo)&lt;/li&gt;
&lt;li&gt;La nostra mente e l&amp;rsquo;impegno üòä&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speriamo che lo stile e il contenuto della pagina siano di gradimento dei professori e che possano usarle nelle loro spiegazioni.&lt;/p&gt;

&lt;p&gt;Grazie per la lettura !&lt;/p&gt;
</description>
            
            <tag>32bit</tag>
            
            <tag>64bit</tag>
            
            <tag>how</tag>
            
            <tag>cpu</tag>
            
        </item>
        
    </channel>
</rss>
