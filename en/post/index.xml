<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello, I&#39;m Marco!</title>
        <link>https://marcomihaicondrache.github.io/en/post/</link>
        <description>Recent content in Posts on Hello, I&#39;m Marco!</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Wed, 27 Nov 2019 00:00:00 +0000</lastBuildDate>
        
        <atom:link href="https://marcomihaicondrache.github.io/en/post/index.xml" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>Turing Machine: Automaton</title>
            <link>https://marcomihaicondrache.github.io/en/post/turing/</link>
            <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
            
            <guid>https://marcomihaicondrache.github.io/en/post/turing/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/issues&#34; style=&#34;float:left; margin-right: 5px;&#34;&gt;&lt;img alt=&#34;GitHub issues&#34; src=&#34;https://img.shields.io/github/issues/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton&#34; style=&#34;float:left; margin-right: 5px;&#34;&gt;&lt;img alt=&#34;GitHub license&#34; src=&#34;https://img.shields.io/github/license/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/network&#34; style=&#34;float:left; margin-right: 5px;&#34;&gt;&lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/stargazers&#34;&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TuringAutomaton&lt;/strong&gt; is an open source project available under license &lt;strong&gt;GNU General Public License v3.0&lt;/strong&gt;. &lt;br&gt; TuringAutomaton is written in C, Java, Python, Dart, MicroBit (Javascript) and Calc. &lt;br&gt; The project is available in Italian and English.&lt;/p&gt;
&lt;p&gt;The files and the project are located on &lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;Github&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;TuringAutomaton is perfect for testing the Turing Machine and implementing it based on its own use.&lt;/p&gt;
&lt;p&gt;The scripts are extremely optimized and quick to use.&lt;/p&gt;
&lt;p&gt;Read more and contribute to Github.&lt;/p&gt;
&lt;h3 id=&#34;documentation-index&#34;&gt;Documentation Index:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#project&#34;&gt;Project&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sets&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#state-transition-table&#34;&gt;Transition of States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#output-transformation-table&#34;&gt;Transformation of Outputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uml&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calc-model&#34;&gt;Calc Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#microbit-implementation&#34;&gt;Microbit implementation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-and-explanation&#34;&gt;Code and explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#source-code&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#video&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-c&#34;&gt;Implementation in C&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operation1&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-and-explanation1&#34;&gt;Code and explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#source-code1&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-java&#34;&gt;Java implementation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operation2&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-and-explanation2&#34;&gt;Code and explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#source-code2&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-python&#34;&gt;Implementation in Python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operation3&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-and-explanation3&#34;&gt;Code and explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#source-code3&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-Dart&#34;&gt;Implementation in Dart&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operation4&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-and-explanation4&#34;&gt;Code and explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#source-code4&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PHP implementation (cooming soon)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-consideration&#34;&gt;Final consideration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;project&#34;&gt;Project&lt;/h1&gt;
&lt;p&gt;Our project was to create an automaton based on the concept of the Turing Machine with the input elements &lt;code&gt; A B C &lt;/code&gt; for the formation of the sequences.
The sequence to be recognized is &lt;mark&gt; AACBB &lt;/mark&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;strong&gt;automaton&lt;/strong&gt; is a discrete dynamic system (in the time and description of its state) and time-invariant (the system behaves in the same way regardless of the instant of time in which it acts).
When the automaton is in a given state, it can accept only a subset of the symbols of its alphabet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;p&gt;We then started to define the different sets and the different transition / transformation tables that represent the features and the behaviour of the automaton.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; = { char }&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;sub&gt;I&lt;/sub&gt;&lt;/strong&gt; = { A, B, C }&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; = { string }&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;sub&gt;O&lt;/sub&gt;&lt;/strong&gt; = { AACBB, no }&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; = { wait, a, aa, aac, aacb }&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;state-transition-table&#34;&gt;State Transition Table&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;V&lt;sub&gt;I&lt;/sub&gt; / S&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;wait&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aa&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aac&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aacb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aa&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aa&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aacb&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aac&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wait&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here are the various steps that the automaton makes based on the state it is in and the input received.&lt;/p&gt;
&lt;p&gt;For example, if the automaton is in the &lt;strong&gt;aac&lt;/strong&gt; state and receives an input &lt;strong&gt;c&lt;/strong&gt; it returns to the initial state because that input is not part of the string to be detected&lt;/p&gt;
&lt;h2 id=&#34;output-transformation-table&#34;&gt;Output Transformation Table&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;V&lt;sub&gt;I&lt;/sub&gt; / S&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;wait&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aa&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aac&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;aacb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aacbb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this other table, instead, it shows what value the automaton will send as a result of the state it is in and the input received&lt;/p&gt;
&lt;p&gt;For example, if the automaton is in the &lt;strong&gt;aac&lt;/strong&gt; state and receives an &lt;strong&gt;c&lt;/strong&gt; input, the automaton will output the string &lt;em&gt;no&lt;/em&gt; because the input entered does not allow to identify the string.&lt;/p&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;
&lt;p&gt;To get a clearer and searchable idea we have created a UML model for automating the automaton&lt;/p&gt;
&lt;p&gt;The 5 states of the automaton (nodes) and the relative transitions marked by the input and the outputs are shown
according to the tables built above.&lt;/p&gt;
&lt;p&gt;For example, the transition - A - NO starting from the WAIT node and going to node A indicates that A has been received at input and the automaton returns NO at the output&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/CKx4GCGD/staruml-model-image-en.png&#34; alt=&#34;staruml-model-image.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;calc-model&#34;&gt;Calc Model&lt;/h1&gt;
&lt;p&gt;Everything was put together and we created a model in calc so that we could test its functionality.&lt;/p&gt;
&lt;p&gt;Two spreadsheets have been created. One for the description where the various tables have been implemented and the visual description in Uml.
Another sheet shows the evolution of the automaton over time following the input received.&lt;/p&gt;
&lt;p&gt;We went, thanks to special functions (CERCA.ORIZZ, CERCA.VERT and INDIRETTO), to get the values ​​in the description tables based on what was provided on the evolution sheet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/9fV4GxCF/Screenshot-from-2019-12-03-21-09-21.png&#34; alt=&#34;Calc Model&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;microbit-implementation&#34;&gt;Microbit implementation&lt;/h1&gt;
&lt;p&gt;The same program was implemented on a physical device: MicroBit.
A programmable card, simple and intuitive to use that allowed us to test the functioning of the automaton&lt;/p&gt;
&lt;p&gt;The code has been optimized to make any sequence recognizable with up to three characters for the string formation (&lt;strong&gt;limited by microbit functionality. In the future it will perhaps be possible to extend this limit&lt;/strong&gt;).&lt;/p&gt;
&lt;h3 id=&#34;operation&#34;&gt;Operation&lt;/h3&gt;
&lt;p&gt;The operation of the program is quite simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the A key the first letter is associated in this case &lt;strong&gt;&amp;ldquo;A&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the key b the second letter is associated in this case &lt;strong&gt;&amp;ldquo;B&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;With the movement the third letter is associated in this case &lt;strong&gt;&amp;ldquo;C&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/ZRWp6dsy/Screenshot-2019-11-28-Microsoft-Make-Code-for-micro-bit-3-remove.png&#34; alt=&#34;MicroBit Input&#34;&gt;&lt;/p&gt;
&lt;p&gt;The type of output can be &amp;ldquo;number&amp;rdquo; (as in the image that follows) the number of times the sequence is recognized within the array is identified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/LsdqYWKL/Screenshot-2019-11-28-Microsoft-Make-Code-for-micro-bit-1-remove.png&#34; alt=&#34;MicroBit Output 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or it can be a &amp;ldquo;string&amp;rdquo; (as in the image that follows) the entire array is shown on the screen, that is the entire string and during the progress of chars a smile face will be showed at recognised string&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/50KbvHYT/Screenshot-2019-11-28-Microsoft-Make-Code-for-micro-bit-3-remove.png&#34; alt=&#34;MicroBit Output 1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;video&#34;&gt;Video&lt;/h3&gt;
&lt;p&gt;Below is the video showing how microbit works with this automaton&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/495ftljKu-8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;code-and-explanation&#34;&gt;Code and explanation&lt;/h3&gt;
&lt;p&gt;Below is the source code of the mechanism used to operate microbit&lt;/p&gt;
&lt;p&gt;The constant variable &lt;mark&gt;STRING&lt;/mark&gt; contains the string to be checked in the input sequence&lt;/p&gt;
&lt;p&gt;In the variable &lt;mark&gt;outputType&lt;/mark&gt; two values ​​&amp;quot;string&amp;rdquo; or &amp;ldquo;stringCount&amp;rdquo; are accepted which determine the type of output&lt;/p&gt;
&lt;p&gt;The array represents the state of the automaton in fact every time a value is entered it changes according to its previous state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * AUTHOR: Condrache Marco Mihai
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * CLASS: 3^A DATE: 28/11/2019
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * DESCRIPTION: Program for the automaton based on the concept of turing machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * ? GITHUB: https: //github.com/MarcoMihaiCondrache
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// listen for the buttons A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onButtonPressed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
})
&lt;span style=&#34;color:#75715e&#34;&gt;// B
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onButtonPressed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
})
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Check array function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// check if the inserted string has the string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Parameters:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Return:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt;)) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;stringCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;basic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;showIcon&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;IconNames&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Happy&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;outputType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;basic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clearScreen&lt;/span&gt;()
        &lt;span style=&#34;color:#a6e22e&#34;&gt;basic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;showString&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outputType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AACBB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeAt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;()
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;outputType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stringCount&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// string or stringCount
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// listen the shake for the c value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onShake&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
})
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#75715e&#34;&gt;// show counter if the output type is set to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// stringCount
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;basic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forever&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;outputType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stringCount&amp;#34;&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;basic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;showNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stringCount&lt;/span&gt;)
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;The pre-filled code ready to be uploaded is available on the github repo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;implementation-in-c&#34;&gt;Implementation in C&lt;/h1&gt;
&lt;h3 id=&#34;operation1&#34;&gt;Operation&lt;/h3&gt;
&lt;p&gt;The program will ask you from time to time to insert a character, which will be inserted into an array which will in turn be examined to find the string requested.
If the result is positive, the string &amp;ldquo;Sequence found!&amp;rdquo; Will be printed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/44V2nPcK/Screenshot-from-2019-11-29-22-09-00.png&#34; alt=&#34;C work&#34;&gt;&lt;/p&gt;
&lt;p&gt;The array where all characters will be saved will be the same size as the string to be found
consequently the longer the string will be, the more memory will be occupied.&lt;/p&gt;
&lt;h3 id=&#34;code-and-explanation1&#34;&gt;Code and explanation&lt;/h3&gt;
&lt;p&gt;Below is the source code&lt;/p&gt;
&lt;p&gt;The constant variable &lt;mark&gt;STRING&lt;/mark&gt; contains the string to be checked in the input sequence&lt;/p&gt;
&lt;p&gt;In the variable &lt;mark&gt;STRING_LENGTH&lt;/mark&gt; the length of the string is defined (&lt;strong&gt;Warning this constant must always be defined and must correspond to the length of the string&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;In the main () method, the parameters and pushats are requested in the array with the relative function &lt;mark&gt;pushArray(char)&lt;/mark&gt; which shifts the array to the left by 1&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;resetArray()&lt;/mark&gt; function cleans the array and is used to initialize it&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;checkArray()&lt;/mark&gt; function checks the string inside the array and prints the result&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * AUTHOR: Condrache Marco Mihai
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * CLASS: 3^A 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * DATE: 28/11/2019
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * DESCRIPTION: Program for the automaton based on the concept of turing machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * ? GITHUB: https: //github.com/MarcoMihaiCondrache
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define STRING &amp;#34;aacbb&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// STRING that will be searched into the array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define STRING_LENGTH 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Declaring variables
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; word[STRING_LENGTH];
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetArray&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STRING[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    resetArray();
    &lt;span style=&#34;color:#75715e&#34;&gt;// ask for the chars
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (strchr(STRING, current) &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL)
    {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Insert char: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;current);
        pushArray(current);
        checkArray();
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Method that reset array to * values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return void
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetArray&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; STRING_LENGTH; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;)
    {
        word[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Method that shift by 1 the array and append the value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param char The value to append
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return void
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pushArray&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; value)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; STRING_LENGTH &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;)
    {
        word[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    }
    word[STRING_LENGTH &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
}
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Check if the array containts the STRING value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return void
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (strncmp(word, STRING, strlen(STRING)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Sequence found!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;source-code1&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;The pre-filled code ready to be uploaded is available on the github repo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/tree/master/C&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;implementation-in-java&#34;&gt;Implementation in Java&lt;/h1&gt;
&lt;h3 id=&#34;operation2&#34;&gt;Operation&lt;/h3&gt;
&lt;p&gt;The program will ask you from time to time to insert a character, which will be inserted into an array which will in turn be examined to find the string requested. If the result is positive, the string &amp;ldquo;Sequence found!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/hPLsgXY9/Screenshot-from-2019-11-30-11-24-14.png&#34; alt=&#34;Java work&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;code-and-explanation2&#34;&gt;Code and explanation&lt;/h3&gt;
&lt;p&gt;Below is the source code&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;TuringAutomaton&lt;/mark&gt; class is the class where methods for automating the automaton are defined
The &lt;mark&gt;main&lt;/mark&gt; method contains the beginning of the program so it must be called to initialize the program is static and public&lt;/p&gt;
&lt;p&gt;The constant variable &lt;mark&gt;STRING_TO_FIND&lt;/mark&gt; contains the string to be checked in the input sequence&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;pushInArray&lt;/mark&gt; method is called to insert the character into the array according to the LIFO concept&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;checkArray&lt;/mark&gt; method is called to check the string in the array and return the outcome&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Scanner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Program based on the Turing Machine concept (console)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * https://github.com/MarcoMihaiCondrache/TuringAutomaton
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author  Condrache Marco Mihai
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @version 1.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since   2019-11-28
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TuringAutomaton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * The final string that contains the string to find
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String STRING_TO_FIND &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aacbb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String current&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// full word to compare
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;STRING_TO_FIND&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            word&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// insert and check the word with the new char
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Scanner reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Scanner&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insert char: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pushInArray&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;checkWord&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sequence found!\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;STRING_TO_FIND&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Method to check if the list contains
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the STRING_TO_FIND and return true or false.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param  list The array to join to compare
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return  if the string contains the cost
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @since 1.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkWord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        StringBuilder sb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String s &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;STRING_TO_FIND&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/***
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Method to push into array using LIFO concept
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param list The array to push in
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param charT The char to insert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return return the complete list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pushInArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String charT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;charT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;source-code2&#34;&gt;Source Code&lt;/h4&gt;
&lt;p&gt;The pre-filled code ready to be uploaded is available on the github repo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/tree/master/Java&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;implementation-in-python&#34;&gt;Implementation in Python&lt;/h1&gt;
&lt;h3 id=&#34;operation3&#34;&gt;Operation&lt;/h3&gt;
&lt;p&gt;The program will ask you from time to time to insert a character, which will be inserted into an array which will in turn be examined to find the string requested.
If the result is positive, the string &amp;ldquo;Sequence found&amp;rdquo; will be printed&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/TY4p5Vgb/Screenshot-from-2019-11-29-22-26-44.png&#34; alt=&#34;Python work&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;code-and-explanation3&#34;&gt;Code and explanation&lt;/h3&gt;
&lt;p&gt;Below is the source code&lt;/p&gt;
&lt;p&gt;The constant variable &lt;mark&gt;STRING&lt;/mark&gt; contains the string to be checked in the input sequence&lt;/p&gt;
&lt;p&gt;The parameters and pushats in the array are requested each time with the relative function &lt;mark&gt;push_array (char)&lt;/mark&gt; which shifts the array to the left by 1&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;check_array ()&lt;/mark&gt; function checks the string inside the array and returns the outcome&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    * AUTHOR: Condrache Marco Mihai&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    * CLASS: 3^A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    * DATE: 28/11/2019&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    * DESCRIPTION: Program based on the Turing Machine concept (console)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ? GITHUB: https://github.com/MarcoMihaiCondrache/TuringAutomaton&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Define STRING variable to find inside characters&lt;/span&gt;
STRING &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;aacbb&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Define word variable that will contain the insert string&lt;/span&gt;
word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(STRING)
&lt;span style=&#34;color:#75715e&#34;&gt;# Define current variable that will contain the current char&lt;/span&gt;
current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STRING[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push_array&lt;/span&gt;(char):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Push into array with Lifo concept&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param char: The char to insert into the array&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :return:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    word&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    word&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(char)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_array&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Check if the array contains the sequence&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :return bool: Return the condition&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; STRING &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(word)


&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; STRING:
    &lt;span style=&#34;color:#75715e&#34;&gt;# Ask the char&lt;/span&gt;
    current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Insert char: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;# Insert it into the array&lt;/span&gt;
    push_array(current)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check and eventually clear the array&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check_array():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Sequence found&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# If the while statement exits means that it has received an invalid char&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid char&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;source-code3&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;The pre-filled code ready to be uploaded is available on the github repo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/tree/master/Python&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;implementation-in-dart&#34;&gt;Implementation in Dart&lt;/h1&gt;
&lt;h3 id=&#34;operation4&#34;&gt;Operation&lt;/h3&gt;
&lt;p&gt;The program will ask you from time to time to insert a character, which will be inserted into an array which will in turn be examined to find the string requested.
If the result is positive, the string &amp;ldquo;Sequence found&amp;rdquo; will be printed&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/TY4p5Vgb/Screenshot-from-2019-11-29-22-26-44.png&#34; alt=&#34;Dart work&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;code-and-explanation4&#34;&gt;Code and Explanation&lt;/h3&gt;
&lt;p&gt;Below is the source code&lt;/p&gt;
&lt;p&gt;The constant variable &lt;mark&gt;STRING&lt;/mark&gt; contains the string to be checked in the input sequence&lt;/p&gt;
&lt;p&gt;The &lt;mark&gt;checkArray(List&amp;lt;String&amp;gt;)&lt;/mark&gt; function checks the string inside the array and returns the outcome&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/// Constant string that have the value to find inside the array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Type: [String]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aacbb&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/// Main method that request the char every time
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Return: [void]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#75715e&#34;&gt;/// Generate a list with empty space to prevent [Segmentation Fault]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;/// First char of the string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  String &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insert char: &amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stdin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readLineSync&lt;/span&gt;();

    &lt;span style=&#34;color:#75715e&#34;&gt;/// Save chars with the LIFO concept
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeAt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;/// Check the string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;)) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sequence found!&amp;#34;&lt;/span&gt;);
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;));
}

&lt;span style=&#34;color:#75715e&#34;&gt;/// Method that check if the array contains the [STRING]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Param: [List&amp;lt;String&amp;gt; array]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Return: [bool]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;source-code4&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;The pre-filled code ready to be uploaded is available on the github repo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton/tree/master/Dart&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;final-consideration&#34;&gt;Final consideration&lt;/h1&gt;
&lt;p&gt;The project ends here and we believe that the scope of use is very wide.
We have done our best to ensure complete compatibility with all languages ​​and allow a physical test.&lt;/p&gt;
&lt;p&gt;We therefore conclude by saying that the project was beautiful and challenging but brought us so much satisfaction.&lt;/p&gt;
&lt;p&gt;Everything was done with open source software to guarantee full support from the community.&lt;/p&gt;
&lt;p&gt;All the files can therefore be downloaded from &lt;a href=&#34;https://github.com/MarcoMihaiCondrache/TuringAutomaton&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;used-software&#34;&gt;Used Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SO: &lt;strong&gt;&lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;UML Editor: &lt;strong&gt;&lt;a href=&#34;http://staruml.io&#34;&gt;StarUml&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Calc: &lt;strong&gt;&lt;a href=&#34;https://libreoffice.org&#34;&gt;LibreOffice&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Python Editor: &lt;strong&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;&lt;/strong&gt; (JetBrains)&lt;/li&gt;
&lt;li&gt;Dart Editor: &lt;strong&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;C Editor: &lt;strong&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java Editor: &lt;strong&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;&lt;/strong&gt; (JetBrains)&lt;/li&gt;
&lt;li&gt;MicroBit (Javascript): &lt;strong&gt;&lt;a href=&#34;https://makecode.microbit.org/&#34;&gt;Online Editor&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automaton definition: &lt;strong&gt;&lt;a href=&#34;https://wikipedia.org&#34;&gt;Wikipedia&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Images: The images has been uploaded on &lt;strong&gt;&lt;a href=&#34;https://postimages.org&#34;&gt;PostImages&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            
            <tag>Turing</tag>
            
            <tag>Automa</tag>
            
            <tag>MicroBit</tag>
            
            <tag>Sequence</tag>
            
        </item>
        
        <item>
            <title>History of processors</title>
            <link>https://marcomihaicondrache.github.io/en/post/cpuhistory/</link>
            <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://marcomihaicondrache.github.io/en/post/cpuhistory/</guid>
            <description>&lt;p&gt;Before starting to tell the story of the processors it is better to clarify the meaning of the latter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a hardware device whose purpose is to execute and process instructions starting from an architecture under the control of the operating system and with a speed determined by the Clock frequency which represents one of the characteristics in terms of performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first microprocessor is born thanks to the genius of an Italian: the physicist Federico Faggin, Intel engineer, under request of BusiCom, interested in an electronic system for his new desktop calculator, create the first microprocessor of the history 4004 with an architecture in 4 bits.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;YEAR&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1823&lt;/td&gt;
&lt;td&gt;Baron Jons Jackob Berzelius discovers silicon (Si), which today is the basic component of the processors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1903&lt;/td&gt;
&lt;td&gt;In 1903 Nikola Tesla patented electrical logic circuits called &amp;ldquo;gates&amp;rdquo; or &amp;ldquo;switches&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1947&lt;/td&gt;
&lt;td&gt;John Bardeen, Walter Brattain and William Shockley invent the first transistor at Bell Laboratories on December 23, 1947.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1948&lt;/td&gt;
&lt;td&gt;John Bardeen, Walter Brattain and William Shockley patented the first transistor in 1948.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1956&lt;/td&gt;
&lt;td&gt;John Bardeen, Walter Brattain and William Shockley received the Nobel Prize in Physics for their work on the transistor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1958&lt;/td&gt;
&lt;td&gt;The first integrated circuit was developed for the first time by Robert Noyce of Fairchild Semiconductor and Jack Kilby of Texas Instruments. The first IC was shown on 12 September 1958.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960&lt;/td&gt;
&lt;td&gt;IBM developed the first automatic mass production transistor plant in New York in 1960.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1968&lt;/td&gt;
&lt;td&gt;Intel Corporation was founded by Robert Noyce and Gordon Moore in 1968.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1969&lt;/td&gt;
&lt;td&gt;AMD (Advanced Micro Devices) was founded on May 1, 1969.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1971&lt;/td&gt;
&lt;td&gt;Intel with the help of Federico Faggin introduced the first microprocessor, Intel 4004 on November 15, 1971. The 4004 had 2,300 transistors, ran 60,000 OPS (operations per second), addressed 640 bytes of memory and cost $ 200.00.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;before-the-processors&#34;&gt;Before the processors&lt;/h2&gt;
&lt;h4 id=&#34;before-1945&#34;&gt;Before 1945&lt;/h4&gt;
&lt;p&gt;The processing systems were mainly mechanical.
The machines could perform the elementary operations.&lt;/p&gt;
&lt;p&gt;In the nineteenth century programmable machines were born, that is processing systems that could automate a process based on the user&#39;s requests.&lt;/p&gt;
&lt;p&gt;In the 1940s we switched to relays that represented the 0/1 binary numbers but still had mechanical parts&lt;/p&gt;
&lt;p&gt;An example of a mechanical calculator can be found &lt;a href=&#34;https://www.youtube.com/watch?v=aDN4s8ElxqE&#34; title=&#34;Example of mechanical calculator&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;from-45-to-75&#34;&gt;From 45 &amp;lsquo;to 75&amp;rsquo;&lt;/h4&gt;
&lt;p&gt;Commercial production of machines based on vacuum tubes begins, but they are very simple and require the use of machine language (strictly dependent on the machine).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://it.wikipedia.org/wiki/Transistor&#34; title=&#34;Definition of transistor&#34;&gt;transistor&lt;/a&gt; appears : smaller, more economical and faster.
High-level languages begin to appear.&lt;/p&gt;
&lt;h4 id=&#34;moore-theory&#34;&gt;Moore theory&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The maximum number of transistors that can be integrated on a single circuit doubles every 18/24 months.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From 1971 the evolution of the processors continued unabated up until and today.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;federico-faggin&#34;&gt;Federico Faggin&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/qMsM4Xvh/Federico-Faggin-Intel1-800x533.jpg&#34; alt=&#34;Federico-Faggin.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Born in Vicenza in 1941, he is an Italian-born physicist, inventor and entrepreneur.&lt;/p&gt;
&lt;p&gt;He participated in the program for the creation of the Intel 4004 and its successors. He was also the developer of MOS, a technology that allowed the creation of the first EPROM and RAM processors and memories.&lt;/p&gt;
&lt;p&gt;In 74 ’he founded and directed the Zilog, a company specialized in the production of microprocessors.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;today&#34;&gt;Today&lt;/h2&gt;
&lt;p&gt;With the passage of time the evolution of the processors progressed more and more until reaching the very performing ones today and able to execute numerous complex instructions.&lt;/p&gt;
&lt;p&gt;They are capable of performing up to 5000 operations per second, the equivalent of 5Ghz and with a number of cores ranging from 2 to 32, that is &amp;ldquo;the parts of the processor&amp;rdquo; that can perform multiple operations simultaneously.&lt;/p&gt;
&lt;p&gt;The two companies that compete the most in this sector are Amd and Intel, which have been creating processors for over 30 years.
Although they were founded at a year of difference, both can produce excellent processors (In our opinion, Intel does them better :))&lt;/p&gt;
&lt;h2 id=&#34;intel&#34;&gt;Intel&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/7Y0M4cz3/intel-9th-generation-chip-ces-2019.jpg&#34; alt=&#34;Intel-CES-Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;Intel Corporation&lt;/strong&gt; is a US company founded in 1968 with headquarters in Santa Clara (California)&lt;/p&gt;
&lt;p&gt;It currently produces semiconductor devices, microprocessors, network components, chipsets for motherboards (motherboards), chips for video cards and many other integrated circuits, and is considered one of the most important in the industry.&lt;/p&gt;
&lt;h6 id=&#34;intel-according-to-wikipedia&#34;&gt;Intel according to Wikipedia&lt;/h6&gt;
&lt;h2 id=&#34;amd&#34;&gt;Amd&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/k5653r69/F2u8-NP9k6c-DUP4-KLm2tpn-G.jpg&#34; alt=&#34;Amd-Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Advanced Micro Devices, Inc. (abbreviated AMD) is a US semiconductor manufacturer based in Sunnyvale, California. It is one of the world leaders in the production of CPUs for the consumer market, workstations and servers; of integrated and discrete graphics chips after merging with ATI as well as chipset.&lt;/p&gt;
&lt;p&gt;It ranks second in the world in the production of microprocessors with x86 architecture after Intel; while in the production of graphic chips in August 2015 it is in third position (with a market share of 10.7%) preceded by Intel (75.2%) and NVIDIA (14.1%). In 2009, AMD ranked ninth among semiconductor manufacturers in terms of annual revenue&lt;/p&gt;
&lt;h6 id=&#34;amd-according-to-wikipedia&#34;&gt;AMD according to Wikipedia&lt;/h6&gt;
&lt;h2 id=&#34;informations&#34;&gt;Informations&lt;/h2&gt;
&lt;p&gt;This Post was written by Marco Mihai Condrache and Giacomo D&#39;Aronco.
Below the sources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wikipedia.com&#34; title=&#34;Wikipedia website&#34;&gt;Wikipedia&lt;/a&gt; (Some parts of the text)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.computerhope.com&#34;&gt;ComputerHope&lt;/a&gt; (Table information)&lt;/li&gt;
&lt;li&gt;Our mind :)&lt;/li&gt;
&lt;/ul&gt;
</description>
            
            <tag>amd</tag>
            
            <tag>intel</tag>
            
            <tag>history</tag>
            
            <tag>cpu</tag>
            
        </item>
        
        <item>
            <title>Animated List View Scroll</title>
            <link>https://marcomihaicondrache.github.io/en/post/animated_list_view_scroll/</link>
            <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://marcomihaicondrache.github.io/en/post/animated_list_view_scroll/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/animated_list_view_scroll&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/MarcoMIhaiCondrache/animated_list_view_scroll?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/animated_list_view_scroll&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/animated_list_view_scroll&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;dependencies:
  animated_list_view_scroll: any
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;import&#34;&gt;Import&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;package:animated_list_view_scroll/animated_list_view_scroll.dart&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-use&#34;&gt;How To Use&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;AnimatedListViewScroll(
        itemCount: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//REQUIRED
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        itemHeight: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//REQUIRED (Total height of a single item must contains optional padding or margin)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        animationOnReverse: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
        animationDuration: Duration(milliseconds: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;),
        itemBuilder: (context, index) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; AnimatedListViewItem(
            key: GlobalKey(), &lt;span style=&#34;color:#75715e&#34;&gt;//REQUIRED
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            index: index, &lt;span style=&#34;color:#75715e&#34;&gt;//REQUIRED
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            animationBuilder: (context, index, controller) {
              Animation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Offset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; animation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tween&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Offset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(begin: Offset(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;), end: Offset.zero).animate(controller);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SlideTransition(
                position: animation,
                child: Container(
                  height: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
                  child: Card(
                    child: Text(index.toString()),
                  ),
                ),
              );
            },
          );
        },
      );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;showcase&#34;&gt;Showcase&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoMihaiCondrache/animated_list_view_scroll/blob/master/example.gif&#34;&gt;Example -&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;bugsrequests&#34;&gt;Bugs/Requests&lt;/h2&gt;
&lt;p&gt;If you encounter any problems feel free to open an issue. If you feel the library is
missing a feature, please raise a ticket on Github and I&#39;ll look into it.
Pull request are also welcome.&lt;/p&gt;
&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;
&lt;p&gt;For help getting started with Flutter, view our online
&lt;a href=&#34;https://flutter.io/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For help on editing plugin code, view the &lt;a href=&#34;https://flutter.io/platform-plugins/#edit-code&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Apache 2.0 &lt;a href=&#34;https://github.com/MarcoMihaiCondrache/animated_list_view_scroll/blob/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;
</description>
            
            <tag>flutter</tag>
            
            <tag>pub</tag>
            
            <tag>list</tag>
            
            <tag>animated list</tag>
            
        </item>
        
    </channel>
</rss>
